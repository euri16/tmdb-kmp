package dev.euryperez.tmdb.core.models.movies

import dev.euryperez.tmdb.core.models.constants.TmdbConstants
import dev.euryperez.tmdb.core.models.sizes.PosterSize
import kotlinx.datetime.LocalDate

/**
 * Represents detailed information about a movie retrieved from The Movie Database (TMDb).
 *
 * This data class encapsulates various attributes of a movie, including its ID, title,
 * overview, poster and backdrop image paths, release date, ratings, popularity, genres,
 * and production details.
 *
 * @property id The unique identifier for the movie.
 * @property title The title of the movie.
 * @property overview A brief summary or synopsis of the movie.
 * @property posterPath The path to the movie's poster image. This is a relative path;
 *                      use [getPosterUrl] or [posterUrl] to get the full URL.
 * @property backdropPath The path to the movie's backdrop image. This is a relative path;
 *                        use [getBackdropUrl] or [backdropUrl] to get the full URL.
 * @property releaseDate The date when the movie was released.
 * @property voteAverage The average vote score for the movie (typically on a scale of 0-10).
 * @property voteCount The total number of votes the movie has received.
 * @property popularity A numerical value representing the movie's popularity.
 * @property genres A list of [TmdbGenre] objects associated with the movie.
 * @property adult A boolean flag indicating whether the movie is R-rated or adult-themed.
 * @property originalLanguage The original language in which the movie was produced.
 * @property originalTitle The original title of the movie, which might differ from [title]
 *                         if it has been translated.
 * @property video A boolean flag indicating whether the movie has associated video content.
 * @property productionCompanies A list of [TmdbProductionCompany] objects involved in the
 *                               movie's production.
 * @property productionCountries A list of [TmdbProductionCountry] objects representing the
 *                               countries where the movie was produced.
 * @property revenue The total revenue generated by the movie (if available).
 * @property runtime The duration of the movie in minutes (if available).
 * @property budget The budget allocated for the movie's production (if available).
 * @property homepage The official homepage URL for the movie (if available).
 */
data class TmdbMovieDetails(
    val id: Int,
    val title: String,
    val overview: String,
    private val posterPath: String?,
    private val backdropPath: String?,
    val releaseDate: LocalDate?,
    val voteAverage: Double,
    val voteCount: Int,
    val popularity: Double,
    val genres: List<TmdbGenre>,
    val adult: Boolean,
    val originalLanguage: String,
    val originalTitle: String,
    val video: Boolean,
    val productionCompanies: List<TmdbProductionCompany> = emptyList(),
    val productionCountries: List<TmdbProductionCountry> = emptyList(),
    val revenue: Int?,
    val runtime: Int?,
    val budget: Int?,
    val homepage: String?,
) {
    val posterUrl: String? = posterPath?.let { "${TmdbConstants.IMAGE_BASE_URL}original$it" }

    val backdropUrl: String? = backdropPath?.let { "${TmdbConstants.IMAGE_BASE_URL}original$it" }

    /**
     * Returns the full URL for the movie's poster image.
     *
     * @param size The desired size of the poster image.
     * @return The full URL string for the poster image, or null
     *         if the poster path is not available.
     */
    fun getPosterUrl(size: PosterSize): String? {
        return posterPath?.let { "${TmdbConstants.IMAGE_BASE_URL}${size.value}$it" }
    }

    /**
     * Returns the full URL for the movie's backdrop image.
     *
     * @param size The desired size of the backdrop image.
     * @return The full URL string for the backdrop image, or null
     *         if the backdrop path is not available.
     */
    fun getBackdropUrl(size: PosterSize): String? {
        return backdropPath?.let { "${TmdbConstants.IMAGE_BASE_URL}${size.value}$it" }
    }

    companion object
}

data class TmdbProductionCompany(val id: Int, val name: String) {
    companion object
}

data class TmdbProductionCountry(val isoCode: String, val name: String) {
    companion object
}

data class TmdbGenre(val id: Int, val name: String) {
    companion object
}